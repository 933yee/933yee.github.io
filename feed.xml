<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://933yee.github.io//</id><title>Kevin's note</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2022-11-22T23:21:58+08:00</updated> <author> <name>Kevin Lee</name> <uri>https://933yee.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://933yee.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://933yee.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Kevin Lee </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>UVA-11463 Commandos</title><link href="https://933yee.github.io//posts/uva-11463/" rel="alternate" type="text/html" title="UVA-11463 Commandos" /><published>2022-11-17T01:27:00+08:00</published> <updated>2022-11-17T01:27:00+08:00</updated> <id>https://933yee.github.io//posts/uva-11463/</id> <content src="https://933yee.github.io//posts/uva-11463/" /> <author> <name>Kevin Lee</name> </author> <category term="Code" /> <category term="UVA" /> <summary> Problem Link 作法 Floyd-Warshall Code #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int t, n, m, u, v, s, d; int dis[105][105]; int main(){ cin &amp;gt;&amp;gt; t; for(int c = 1; c &amp;lt;= t; c++){ cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m; for(int i = 0; i &amp;lt; 105; i++) for(int j = 0; j &amp;lt; 105; j++) dis[i][j] = (i == j) ? 0 : 105; for(int i = 0; i ... </summary> </entry> <entry><title>UVA-558 Wormholes</title><link href="https://933yee.github.io//posts/uva-558/" rel="alternate" type="text/html" title="UVA-558 Wormholes" /><published>2022-11-17T00:47:00+08:00</published> <updated>2022-11-17T00:47:00+08:00</updated> <id>https://933yee.github.io//posts/uva-558/</id> <content src="https://933yee.github.io//posts/uva-558/" /> <author> <name>Kevin Lee</name> </author> <category term="Code" /> <category term="UVA" /> <summary> Problem Link 作法 Bellman-Ford Code #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int t, n, m, u, v, w; vector&amp;lt;tuple&amp;lt;int, int, int&amp;gt;&amp;gt; edges; vector&amp;lt;int&amp;gt; dist; int main(){ cin &amp;gt;&amp;gt; t; while(t--){ cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m; edges.clear(); dist.clear(); dist.resize(n, INT_MAX/2); for(int i=0; i&amp;lt;m; i++){ cin &amp;gt;... </summary> </entry> <entry><title>Trees</title><link href="https://933yee.github.io//posts/trees/" rel="alternate" type="text/html" title="Trees" /><published>2022-10-22T19:49:00+08:00</published> <updated>2022-11-22T23:19:10+08:00</updated> <id>https://933yee.github.io//posts/trees/</id> <content src="https://933yee.github.io//posts/trees/" /> <author> <name>Kevin Lee</name> </author> <category term="Code" /> <category term="Others" /> <category term="Trees" /> <category term="Data Structure" /> <summary> Left Child-Right Sibling Property Each node has exactly two link fields Left link(child): points to leftmost child node. Right link(sibling): points to closest sibling node. Rotate clockwise 45° Special Binary Tree Full binary tree A binary tree of depth k which has 2k – 1 nodes ... </summary> </entry> <entry><title>Expressions</title><link href="https://933yee.github.io//posts/expressions/" rel="alternate" type="text/html" title="Expressions" /><published>2022-10-05T14:01:00+08:00</published> <updated>2022-11-22T23:19:10+08:00</updated> <id>https://933yee.github.io//posts/expressions/</id> <content src="https://933yee.github.io//posts/expressions/" /> <author> <name>Kevin Lee</name> </author> <category term="Code" /> <category term="Others" /> <category term="Expressions" /> <category term="Data Structure" /> <summary> Infix Property Operator comes in-between the operands. Ambiguous. Need parentheses to make them unambiguous. Hard to evaluate using codes. Postfix Property Each operator appears after its operands. No need parentheses . Priority of operators is no longer relevant. Postfix notations can be used in intermediate cod... </summary> </entry> <entry><title>Time Complexity</title><link href="https://933yee.github.io//posts/time-complexity/" rel="alternate" type="text/html" title="Time Complexity" /><published>2022-09-17T18:05:00+08:00</published> <updated>2022-10-25T13:09:54+08:00</updated> <id>https://933yee.github.io//posts/time-complexity/</id> <content src="https://933yee.github.io//posts/time-complexity/" /> <author> <name>Kevin Lee</name> </author> <category term="Code" /> <category term="Others" /> <category term="Time Complexity" /> <category term="Data Structure" /> <summary> Big-O (O) 定義 f(n) = O(g(n)) iff there exists c, n0 &amp;gt; 0 such that f(n)\(\le\) c \(\cdot\) g(n) for all n \(\ge\) n0 意義 只需要找到 n0 和常數c使得所有符合n\(\ge\) n0 的整數滿足f(n) \(\le\) c \(\cdot\) g(n)，則f(n) = O(g(n))成立。 例子 3n+2 = O(n) 當 c=4, n0 = 2 時，3n+2 \(\le\) 4n for all n \(\ge\) 2 100n+6 = O(n) 當 c=101, n0 = 6 時，100n+6 \(\le\) 10... </summary> </entry> </feed>
